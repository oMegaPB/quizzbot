import os
import re
import html
import logging
import pathlib

from aiogram import types, Router, Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.client.default import DefaultBotProperties

from models import Config

# –ø–æ—è—Å–Ω—é –∑–∞ type: ignore
# —è —É—Å—Ç–∞–ª –±–æ—Ä–æ—Ç—å—Å—è —Å –∞–∏–æ–≥—Ä–∞–º–æ–º –∏ —Ç–µ–º 
# —á—Ç–æ –Ω—É–∂–Ω–æ –ø–∏—Ö–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ—á—Ç–∏) –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã—Ö –∞—Å—Å–µ—Ä—Ç–æ–≤
# –ª–∏—á–Ω–æ –º–Ω–µ —É–¥–æ–±–Ω–µ–µ –∑–∞–∫—Ä—ã—Ç—å –Ω–∞ —ç—Ç–æ –≥–ª–∞–∑–∞

router = Router(name="main")
config = Config.from_file("config.json")
properties = DefaultBotProperties(parse_mode="HTML")
bot = Bot(token=config.token, default=properties)

def get_logger(name: str, filename: str) -> logging.Logger:
    cwd = pathlib.Path(__file__).parent
    logger = logging.Logger(name=name)
    cwd.joinpath("logs").mkdir(exist_ok=True)
    handler = logging.FileHandler(cwd.joinpath("logs", filename), mode='a', encoding="u8", delay=False)
    handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    return [logger.addHandler(handler), logger][1]

_log = get_logger("main", "log.log")

@router.startup()
async def on_startup(bot: Bot, dispatcher: Dispatcher, bots: tuple[Bot], router: Router):
    self = await bot.get_me()
    print(f"Logged in as {self.full_name}")
    print("All logs in ./logs/log.log")

@router.message(Command("start"))
async def start_handler(message: Message):
    if message.from_user:
        _log.info(f"{message.from_user.username} [{message.from_user.id}] just used /start")
    text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>{config.team_name}</b>!\n\n"
    text += "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞–π –∑–∞—è–≤–∫—É ‚¨áÔ∏è"
    button = types.InlineKeyboardButton(text="üíä –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="start")
    markup = types.InlineKeyboardMarkup(inline_keyboard=[[button]])
    await message.answer(text=text, reply_markup=markup)

@router.callback_query()
async def callback_query_handler(query: types.CallbackQuery, state: FSMContext):
    if query.data == "start":
        await state.set_state("on_questions")
        questions = iter(config.questions.items())
        key, question = next(questions)
        await state.set_data({"questions": questions, "question": key})
        await query.message.delete() # type: ignore
        await bot.send_message(query.message.chat.id, question) # type: ignore
    elif query.data in ["okay", "nah_wait"]: # user answers
        user = query.from_user
        _log.info(f"{user.username} [{user.id}] confirmed his answers. {query.data}")
        if query.data == "nah_wait":
            return await query.message.delete() # type: ignore
        answers = "\n".join(query.message.text.split("\n")[1:-2]) # type: ignore
        text = f"–ó–∞—è–≤–∫–∞ ‚Ññ<code>{os.urandom(4).hex()}</code>\n"
        if not query.from_user.username:
            name = html.escape(query.from_user.first_name)
            username = f"–±–µ–∑ —é–∑–∞. (<code>{name}</code>)"
        else:
            username = "<code>@" + html.escape(query.from_user.username) + "</code>"
        text += f"{username} <code>[{query.from_user.id}]</code>\n"
        answers = html.escape(answers)
        text += f"–û—Ç–≤–µ—Ç—ã:\n{answers}"
        values = [["–ü—Ä–∏–Ω—è—Ç—å ‚úÖ", "accept"], ["–û—Ç–º–µ–Ω–∞ ‚ùå", "deny"]]
        inline_keyboard = [[types.InlineKeyboardButton(text=x, callback_data=y)] for x, y in values]
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await bot.send_message(config.owner_accepter_id, text=text, reply_markup=reply_markup)
        await query.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=None) # type: ignore
    elif query.data in ["accept", "deny"]: # admin answers
        user = query.from_user
        lines = query.message.text.split("\n") # type: ignore
        user_id = int(re.findall(r"\[(\d+)\]", lines[1])[0]) # –≤—ã—á–ª–µ–Ω—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ —é–∑–µ—Ä–∞
        _log.info(f"{user.username} [{user.id}] reviewed answers for {user_id}: {query.data}")
        rid = lines[0] # –ó–∞—è–≤–∫–∞ ‚Ññ{id}
        text = {
            "accept": f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∞. ‚úÖ\n\n–ß–∞—Ç: {config.work_chat_url}",
            "deny": "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå"
        }[query.data]
        await bot.send_message(user_id, text=text, disable_web_page_preview=True)
        await query.answer()
        action = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå' if query.data == 'deny' else '–ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ'
        await bot.send_message(query.message.chat.id, rid + f" –±—ã–ª–∞ {action}") # type: ignore

@router.message(StateFilter("on_questions"))
async def on_question(message: Message, state: FSMContext):
    if not message.text:
        return await message.reply("–û–∂–∏–¥–∞–ª—Å—è –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç–æ–º. ‚ùå")
    data = await state.get_data()
    answer = html.escape(message.text)
    await state.update_data({data["question"]: answer})
    questions = data["questions"]
    try:
        key, question = next(questions)
        await message.answer(question)
        await state.update_data({"question": key})
    except StopIteration:
        await state.clear()
        data[data["question"]] = answer
        answers = [y for x, y in data.items() if x not in ["questions", "question"]]
        parts = [f"{x}) {y}\n" for x, y in enumerate(answers, start=1)]
        text = "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n" + "".join(parts) + "\n–í—Å–µ –≤–µ—Ä–Ω–æ?"
        values = [["–í—Å–µ –≤–µ—Ä–Ω–æ ‚úÖ", "okay"], ["–û—Ç–º–µ–Ω–∞ ‚ùå", "nah_wait"]]
        inline_keyboard = [[types.InlineKeyboardButton(text=x, callback_data=y)] for x, y in values]
        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
        await bot.send_message(message.chat.id, text, reply_markup=reply_markup)
